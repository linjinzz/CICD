# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [main]
    paths:
      [
        "**.c",
        "**.cpp",
        "**.h",
        "**.hpp",
        "**.cxx",
        "**.hxx",
        "**.cc",
        "**.hh",
        "**CMakeLists.txt",
        "meson.build",
        "**.cmake",
      ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        cpp_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.7.2"
          target: "desktop"
          arch: "win64_msvc2019_64"
          dir: "${{ github.workspace }}/ThirdParty/"
          install-deps: "true"
          cache: "true"
          cache-key-prefix: "install-qt-action"
          set-env: "true"

        #install ninja

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -G Ninja
          -S ${{ github.workspace }}/untitled34

      - name: Check if compile_commands.json file exists
        shell: pwsh
        run: |
          if (Test-Path "D:\a\CICD\CICD\build\compile_commands.json") {
            Write-Output "File compile_commands.json exists"
          } else {
            Write-Output "File compile_commands.json does not exist"
            exit 1
          }

      - uses: cpp-linter/cpp-linter-action@v2
        id: linter
        with:
          style: "" # disable clang-format checks.
          tidy-checks: "" # Use .clang-tidy config file.
          database: "${{ github.workspace }}/build"
          version: "18"

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: upload package
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: C++_BINARY
          path: ${{ github.workspace }}/build/appuntitled34.exe

      # - name: Fail fast?!
      #   if: steps.linter.outputs.clang-tidy-checks-failed > 0
      #   run: exit 1

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
